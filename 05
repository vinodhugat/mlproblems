# support machine vector
import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm

# Input data
X = np.array([
    [1, 1, -1],
    [2, 1, -1],
    [1, -1, -1],
    [2, -1, -1],
    [4, 0, 1],
    [5, 1, 1],
    [5, -1, 1],
    [6, 0, 1]
])

# Extract features and labels
features = X[:, :2]  # Extracting the first two columns as features (X1, X2)
labels = X[:, 2]     # Extracting the third column as class labels (-1 or 1)

# Create SVM model
clf = svm.SVC(kernel='linear')  # Creating a linear Support Vector Machine (SVM) model

# Train the model
clf.fit(features, labels)  # Training the SVM model with the provided features and labels

# Print the learned coefficients (weights) and intercept (bias)
print("Coefficients:", clf.coef_)      # Coefficients represent the weights of the features
print("Intercept:", clf.intercept_)     # Intercept represents the bias term

# Plot the data points
plt.scatter(features[:, 0], features[:, 1], c=labels, cmap=plt.cm.Paired)
# Scatter plot of data points where colors represent different class labels

# Plot the hyperplane
ax = plt.gca()
xlim = ax.get_xlim()
ylim = ax.get_ylim()

# Create grid to evaluate model
xx, yy = np.meshgrid(np.linspace(xlim[0], xlim[1], 50),
                     np.linspace(-2, 2, 50))  # Creating a grid of points for evaluation

# Use the decision function to get the values for the decision boundary
Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])
Z = Z.reshape(xx.shape)

# Plot decision boundary and margins
plt.contour(xx, yy, Z, colors='k', levels=[-1, 0, 1], alpha=0.5,
            linestyles=['--', '-', '--'])
# Plotting decision boundary and margins based on the decision function values

# Plot support vectors
plt.scatter(clf.support_vectors_[:, 0], clf.support_vectors_[:, 1], s=100,
            facecolors='none', edgecolors='k')
# Highlighting the support vectors with larger markers

# Set plot title and labels
plt.title('SVM with Hyperplane')
plt.xlabel('X1')
plt.ylabel('X2')

# Display the plot
plt.show()
